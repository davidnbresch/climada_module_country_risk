function [entity,centroids]=climada_hybrid_entity(admin0_name)
% climada hybrid entity
% MODULE:
%   country_risk
% NAME:
%   climada_hybrid_entity
% PURPOSE:
%   Create a high-resolution entity (climada_nightlight_entity) for the
%   country within its borders and add the mid-resolution centroids for
%   offshore along the coast plus coarse resolution centroids around the
%   country (from GDP_entity)
% CALLING SEQUENCE:
%   [entity,centroids]=climada_hybrid_entity(admin0_name)
% EXAMPLE:
%   entity=climada_hybrid_entity('Switzerland')
% INPUTS:
%   admin0_name: country name
%       > promted for if not given
% OPTIONAL INPUT PARAMETERS:
% OUTPUTS:
%   entity: the entity, see e.g. climada_entity_read for a description of
%       the entity structure
% MODIFICATION HISTORY:
% David N. Bresch, david.bresch@gmail.com, 20150915, intitial
% David N. Bresch, david.bresch@gmail.com, 20160907, calling new climada_nightlight_entity
%-

entity=[]; % init output
centroids=[]; % init output

global climada_global
if ~climada_init_vars,return;end % init/import global variables

% poor man's version to check arguments
% and to set default value where  appropriate
if ~exist('admin0_name','var'),admin0_name=[];end

% PARAMETERS
%

% check for module GDP_entity, as it otherwise fails anyway
if length(which('climada_create_GDP_entity'))<2
    fprintf('ERROR: GDP_entity module not found. Please download from github and install. \nhttps://github.com/davidnbresch/climada_module_GDP_entity\n');
    return
end

if isempty(admin0_name),admin0_name=climada_country_name('Single');end
if isempty(admin0_name),return;end

[centroids.admin0_name,centroids.admin0_ISO3,shape_index]=climada_country_name(admin0_name);
centroids.comment=sprintf('generated by %s',mfilename);

% generate coarse (10km) entity
[centroids_10,entity_10] = climada_create_GDP_entity(centroids.admin0_name,[],0,1);

% generate the 1km entity
p.resolution_km=1;
entity=climada_nightlight_entity(centroids.admin0_name,'',p); % generate fine (1km) entity

% keep high res centroids for assets
assets_pos=find(entity.assets.Value>0);
centroids.lon=entity.assets.lon(assets_pos);
centroids.lat=entity.assets.lat(assets_pos);

% coarse centroids for surroundings
first_non_asset_pos=entity_10.assets.centroid_index(end)+1;
centroids.lon=[centroids.lon centroids_10.lon(first_non_asset_pos:end)];
centroids.lat=[centroids.lat centroids_10.lat(first_non_asset_pos:end)];
centroids.centroid_ID=1:length(centroids.lon);

% restrict entity
entity.assets.lon=entity.assets.lon(assets_pos);
entity.assets.lat=entity.assets.lat(assets_pos);
entity.assets.Value=entity.assets.Value(assets_pos);
% scale with GDP
entity.assets.Value=entity.assets.Value/sum(entity.assets.Value)*sum(entity_10.assets.Value)
entity.assets.DamageFunID=entity.assets.DamageFunID(assets_pos);
if isfield(entity.assets,'distance2coast_km'),...
        entity.assets.distance2coast_km=entity.assets.distance2coast_km(assets_pos);end
entity.assets.centroid_index=1:length(assets_pos);
entity.assets.Deductible=entity.assets.Value*0;
entity.assets.Cover=entity.assets.Value;
entity.assets.reference_year=climada_global.present_reference_year;

end % climada_hybrid_entity